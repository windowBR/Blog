{"meta":{"title":"windowBR的博客","subtitle":"","description":"","author":"windowBR","url":"http://blog.windowbr.top","root":"/"},"pages":[{"title":"友链","date":"2022-12-24T03:44:47.271Z","updated":"2022-12-24T03:44:47.271Z","comments":true,"path":"PY.html","permalink":"http://blog.windowbr.top/PY.html","excerpt":"","text":"我的朋友们"},{"title":"关于","date":"2022-10-10T12:17:43.000Z","updated":"2023-06-24T09:17:13.077Z","comments":true,"path":"about.html","permalink":"http://blog.windowbr.top/about.html","excerpt":"","text":"关于我普普通通男大学生，双非一本在读，虽然在读机械专业但是转行到计算机的心一直有（（（ 关于本站2023 1-14 使用 hexo-bilibili-bangumi 插件为博客添加了追番列表功能，数据源为 Bangumi（番组计划） 2022 10-10 将 Hexo 与 Nexmoe 初步配置完毕，博客初步搭建完成 10-09 为博客安装 Nexmoe 主题 10-08 使用 Hexo 开始搭建博客，使用腾讯云 COS 作为图床"},{"title":"文章归档","date":"2022-10-10T11:45:49.583Z","updated":"2022-10-10T11:35:38.734Z","comments":true,"path":"archive.html","permalink":"http://blog.windowbr.top/archive.html","excerpt":"","text":""},{"title":"谢谢打钱","date":"2022-10-10T12:18:22.000Z","updated":"2023-01-11T17:02:53.229Z","comments":true,"path":"donate.html","permalink":"http://blog.windowbr.top/donate.html","excerpt":"","text":"啊但是反正没人会给我赞助，这页面就先随他放在这吧（"}],"posts":[{"title":"反抗，自由，与存在","slug":"workshop-short-3","date":"2023-01-11T16:59:10.000Z","updated":"2023-07-13T17:00:18.218Z","comments":true,"path":"2023/01/12/workshop-short-3/","link":"","permalink":"http://blog.windowbr.top/2023/01/12/workshop-short-3/","excerpt":"","text":"最近刚刚把橘子班的炒饭三部曲推完 众所周知三部曲有四部，但我并没有推第 0 部《余香》，于是这篇便是推完后的感想，因为是第一次写作品的长评，可能有许多写得不够好的地方还请多多见谅。 观前提醒：有一定程度的剧透 茸雪 既反抗专制，又反抗自由；既反抗自由的专制，又反抗专制的自由 茸雪这部作品作为三部曲的第一部 我说了余香算第 0 部，十分明了的主题一下子便让人知道作者炒饭希望在这三部曲里给大家带来的是什么。 何为自由在游玩的过程中，中心永远都是同一个问题：“被人为控制的恋爱是否自由？又是否正确？”或许看到这里的你马上就会提出反驳：“既然是人为控制的，那又谈何自由？” 但如果自身并没有得知被控制了呢？遇见一个人，然后爱上对方，对方也爱上了你，你们一起生活，每天的点点滴滴都是和睦而又融洽，一切都是那么的自然，这不正是大多数人所希望的理想恋爱吗？ 本作的男主与小茸便是如此，在教授的控制下，二人都十分自然的爱上了对方，无论什么事都非常合拍仿佛天生一对。但男主得知自己与小茸是在教授的控制下爱上的对方后便陷入了深深的怀疑：“互相的爱是否真实？自己是否是自由地爱上小茸？” 何为自由？在剧情中教授的话里，便有如此提到：“世界上没有自由的人。从你出生的那一刻开始，身边的环境就决定了你发展的方向。”而这也是本作品的中心点之一：不存在绝对的自由。 反抗即自由该作有三个结局，前两个结局中男主放弃了反抗，然后与小茸继续过上了幸福的生活，第三个结局中男主对这一切发起了反抗，但最终也没有改变与小茸仍然相互喜欢，并继续生活在一起的结局。但在最后，教授问了男主：“你是自由的喜欢上小茸的吗？”男主给出了肯定的回答。而这一切的原因正是自己意识到了自己并不自由，当人发现自己不自由，就是自由的开端，因为知道了不自由，所以有了反抗的能力，你不一定自由，但你可以反抗，人之所以为人，不是因为自由，而是因为反抗。反抗即自由。 对现实情况的考虑游玩这部作品时，也许会有玩家对于这项技术从嗤之以鼻到觉得梦幻而美好的转变，但在番外篇《雪》中，这种想法得到了作者的否认。 以下是个人对《雪》的理解：当美好的恋爱能够被控制，那么这种本就有大量需求的事物就可能会变成商品，因为有供求就会有市场，而在市场中能力最大的往往是资本，因此便会出现资本控制商品的情况，便会引起《雪》中发生的悲剧。 梦末 世界末日，一切从简 首先不得不承认我对梦末的理解是比另外两部都要浅的，虽说昙花的表现是三部曲中最为抽象的，但同时也有很明确的主题，但谈这部梦末我就全靠我的一点个人见解了。 惯性末日随时可能到来，所有人都知道再做什么已经没有了意义，并且需要依靠药物才能维持生命，那么继续活着的人是因为有动力吗？并不是，一切都已经没有意义，继续活着的人仅仅是因为一种惯性而继续活着，正因如此男主角毕升才会在已经没有考试的世界里继续维持着做卷子的习惯。 爱恋药物使人活下去的同时也夺走了人们的情感、欲望，变成性无能，但是唐乐吟却来到了毕升身边，并要求与其交往。这里我个人的想法是这样的：唐乐吟曾经也喜欢男主，但在药物作用下逐渐对男主没有了感觉，出于爱的惯性而并非真正的爱，不甘因药物而失去感情，从而故意调戏与男主互动，希望能在双方的交流中找回自己的情感。但对于男主而言，早已没有了感情与欲望，在一日日的交流中，两人开始逐渐努力，尝试着让自己真正的爱上对方，即使想跨出那一步，也无能为力 说白了就是男主没感情没欲望现在是个性无能阳痿。 末日背景下的极致浪漫“世界末日，一切从简。” 这是贯穿始末的一句话，因为复杂的事物、情感，都只会加速药物的消耗，这是一个从最开始就告诉了读者这是个悲剧的故事。但在这样的大环境下，唐乐吟依旧选择了最不节能的做法，拉着男主去体验一些情侣日常般的浪漫，如梦一般。既然是梦，那么就一定会有结束的时候，唐乐吟的药物先一步耗尽，她选择了独自离开，不愿让男主见证她的死去。察觉到的男主不顾一切的飞奔寻找唐乐吟，此时的二人的感情又究竟是爱，还是这些日子所带来的惯性呢？在这场浪漫之梦结束后，男主依旧维持着惯性，日复一日做着卷子，但此时他的心中一定也有那个阻挠他做卷子的唐乐吟吧。 在死亡随时会到来的日子里，我一个在呆在只剩我一人的城市里，做着一张名为 “唐乐吟” 的卷子 昙花 一所学校，一个女孩一束昙花，一叠明信片一段温馨却又模糊的记忆 还有……一个不需要后悔的世界 人的灵魂本作的一个核心问题：“如果可以，你是否会选择舍弃自己的部分记忆” 作者炒饭在该作中给出了自己的一个观点：记忆构成人的灵魂。那么舍弃记忆就是舍弃自己的灵魂。调查显示能选择性忘掉琐事的人的生活更加幸福，无事一身轻，而男主则是实践的第一人，他选择忘掉了自己曾经努力而最后发现是无用功的过去，但在临终前却试图找回这一切…… 总结本作的叙述手段相比前两作而言更为抽象，正如一百个人眼中有一百个哈姆雷特，不同人眼中也有不同的昙花，所以昙花的部分我更多的还是留出想象的空间吧，既是为了不让他人先入为主，也是为了不让自己的思维因此固定。看到许多人的总结中评价道这几部短篇作品有浓厚的哲学中存在主义的色彩，虽然不太了解哲学，但我也稍微结合自己的感受谈谈自己的看法吧。 存在主义：即 ”存在先于本质“，一切的一切一开始并没有本质，人也一样，而是在你出生、存在于这个世界上后由你自己决定你的本质是一个什么样的人，体现在《茸雪》中，例如教授对于爱情的理解，在她看来爱情的本质是社会化的结果，也因此可以市场化、统一管理。当你真正游玩这部作品后或许也会觉得在将例如《雪》篇中的一些缺点解决掉以后之后教授的话也相当有道理；体现在《梦末》中，男主在面对末日也仅仅只是日复一日的做着卷子，他不需要别人给他定下的规则；体现在《昙花》中，面对记忆&#x2F;灵魂的商品化，选择出售的人获得了金钱与轻松，选择保留的人获得了所谓 完整的灵魂 ，但他们都没有谁对谁错，仅仅只是对于事物的本质有着不同的理解。 存在主义的另一个核心词汇便是 “荒诞” 因为并不存在所谓的本质，只是由自己所决定，一切的终点都是虚无或是死去，没有明确的目的与胜利，只是你做出的选择。正因如此炒饭的作品才显得如此引人思考，他没有给出他所认为的正确答案，而只是抛出了问题，至于问题的答案，每个人心中会做出自己的选择。 最后，放出《茸雪》中的一个小片段。","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://blog.windowbr.top/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"Galgame","slug":"Galgame","permalink":"http://blog.windowbr.top/tags/Galgame/"}]},{"title":"使用 CentOS 搭建 Minecraft 服务器（已失败）","slug":"MinecraftSever","date":"2022-11-18T12:47:08.000Z","updated":"2023-07-13T16:59:57.009Z","comments":true,"path":"2022/11/18/MinecraftSever/","link":"","permalink":"http://blog.windowbr.top/2022/11/18/MinecraftSever/","excerpt":"","text":"为什么失败了还要把博客发出来：虽然由于服务器性能过低导致失败，但本文依旧有大量可供参考的内容，我边搭服务器边写的博客，在我失败的时候已经写了这么多了我不舍得直接丢掉背景本着学习新知识的想法，本人通过教育认证的方式白嫖到了 Azure 的一台 Linux 服务器，并安装了 CentOS，但由于本人并不懂 Linux 的相关操作，因此服务器至今吃灰（ 因此，由于本人一直是 Minecraft 忠实玩家，但又从来没有过使用 Linux 搭建服务端进行游戏的尝试（之前仅有尝试过使用 Windows server 搭建的经验），于是决定利用这台服务器进行 Minecraft 游戏服务器的搭建。 上文已说到，本人并不熟悉 Linux 的相关操作，因此本文的操作大多数基于 新兵Sinbing 的视频 Linux系统MC服务器开服教程 进行操作。 正式开始Linux 端相关软件安装首先要进行的便是相关环境的安装，包括 JAVA 11, screen, zip&amp;unzip, wget wget: 从 url 下载文件 1$ yum install -y wget JAVA 17 新兵Sinbing 使用的为 Java 8，可使用 yum 进行更简便的安装，但高版本的 Minecraft 需要更高版本的 Java，因此本文将讲述 Java 17 的安装方法 依次执行以下指令（如果找不到目录请将第二行代码的目录名改为你的实际目录名） 12$ wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz$ mv jdk-17.0.5/ /usr/lib/jvm 配置 Java 环境变量网上的教程多为让你使用 vi （Linux 自带的文本编辑器）进行文件修改，但这对小白来说过于麻烦，所以我的解决方案是直接使用 Xftp 搭配本地编辑器进行修改。 首先使用 Xftp 进入 &#x2F;etc 目录下找到 profile 文件，直接右键打开，在最后加入以下代码： 123export JAVA_HOME=/usr/lib/jvm/jdk-17.0.5export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 如图所示 然后直接保存退出即可（没有 VS code 的可以用记事本代替） 返回 Xshell 刷新环境变量并验证是否安装完成 12$ source /etc/profile$ java -version 若安装正确则出现类似这样的提示 1234[root@ALinux ~]# java -versionjava version &quot;17.0.5&quot; 2022-10-18 LTSJava(TM) SE Runtime Environment (build 17.0.5+9-LTS-191)Java HotSpot(TM) 64-Bit Server VM (build 17.0.5+9-LTS-191, mixed mode, sharing) screen: 多任务后台运行 1$ yum install -y screen zip&amp;unzip: 压缩&amp;解压zip 12$ yum install -y zip$ yum install -y unzip 服务端下载与初始化本文仅介绍原版服务端，其他服务端自己查阅相关资料 为操作方便，本人选择在个人电脑上（Windows）进行下载及初始化 服务端的下载方式 1：官网下载最新版服务端 下载 MINECRAFT ：JAVA 版的服务器 方式 2：官方启动器下载 在 配置 页面点击 新配置，便能看到服务端的下载按钮 服务端初始化相信所有 Minecraft 玩家的电脑都已配置好 Java 环境，因此本文不再赘述。 首先新建一个文件夹作为服务器文件夹，将下载好的服务端 jar 文件拖入，Windows 端可直接双击运行，然后等待文件加载后，可以看见名为 eula.txt 的文件，此文件为相关协议，因此需要手动同意协议方可开服，将该文件内的 eula=false 更改为 eula=true 后保存即可。 再次双击 server 初次运行服务器，等待世界生成等初始化完成后，如图看见控制台出现 Done 字样即为初始化完毕 此时控制台输入 stop 即可关闭服务器 将服务端上传至云服务器新兵Sinbing 使用的软件为 bitvise SSH 但由于本人更加习惯 Xshell 与 Xftp，因此采用Xshell 进行演示。 首先自行下载软件并连接上自己的云服务器。 将上一步初始化完成的服务端整个文件夹打包为 zip 格式（这就不用我教了吧） 使用 Xftp 直接将文件拖入上传至服务器，推荐上传目录为 /home/&lt;你的用户名&gt; 下。 不懂什么叫 目录 的小白可以认为和 Windows 下的 文件夹 差不多 在 Xshell 中使用 cd 命令移动到服务器压缩包目录下后，使用 unzip 命令进行解压缩操作（ &lt;server.zip&gt; 的内容替换为自己压缩包的文件名） 1$ unzip &lt;server.zip&gt; 解压完成后确保自己正处在服务器文件夹下，运行以下命令启动服务器 1$ java -Xmx4096M -Xms1024M -jar &lt;server.jar&gt; nogui Xmx 为最大内存，Xms 为最小内存，根据自己的服务器配置进行调整 &lt;server.jar&gt; 替换为自己的服务器 jar 文件 悲伤的故事然后本人的搭服务器计划停留在了这一步，因为服务器性能太低，进程直接被 killed 了，总之就是非常难受 本文完 相关链接Java 17 安装教程: Centos 7 安装 java 17 新兵Sinbing 的视频教程: Linux系统MC服务器开服教程 | 基础开服、自动备份、MCDR、统统都有","categories":[{"name":"技术","slug":"技术","permalink":"http://blog.windowbr.top/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Minecraft","slug":"Minecraft","permalink":"http://blog.windowbr.top/tags/Minecraft/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.windowbr.top/tags/Linux/"}]},{"title":"建站有感","slug":"BuildBlog","date":"2022-10-10T13:20:34.000Z","updated":"2023-07-13T17:00:04.761Z","comments":true,"path":"2022/10/10/BuildBlog/","link":"","permalink":"http://blog.windowbr.top/2022/10/10/BuildBlog/","excerpt":"","text":"为什么建站说来也巧，早期就有搭建自我博客的想法，然后在建站前一天偶然刷到免费的网站托管平台（然后尝试后感觉还是GitHub pages舒服），当时前端知识为零的我就尝试了搭起了自己的第一个网站 （图为写该文时截的，所以加上了博客的超链接） 确实零基础，因为如何插入图片、超链接这些都是现场查的 当时就发现貌似现在的 GitHub Pages 不止限定一个仓库了，非常巧的第二天看到有大佬群友在交流博客，见他们提到了Hexo是一个不错的博客框架，于是下课后便开始尝试 中途遇见的困难那可真是，太太太太太太多了 下文充满许多能让您血压飙升的案例，其中不少是因为没有足够仔细阅读官方文档造成的，所以玩什么前请一定仔细阅读官方文档 与所查看的教程视频不同的情况非常不幸，我并不懂 Node.js 的知识，而安装 Hexo 就是靠它，教程视频中十分顺畅的在安装好 nodejs 后在 git bash 中使用 npm 进行了安装，而我进行相同操作时则是 12$ npm -vbash: npm: command not found 第一反应是挺懵逼的，因为我确确实实安装了 nodejs，并且在 PowerShall 中能够使用。然后就是许许多多的网络查找，最终发现问题出在环境变量上，而所学习的 Hexo 搭建教程中并没有提到配置环境变量，因此造成了问题。配置好环境变量后，成功在 git bash 中正常使用npm。 Hexo 部署错误使用 hexo d 部署时，多次出现 err: Error: Spawn failed 错误，目前猜测大约是网络不稳定的问题（是的我还是不确定问题出在哪），但当时初搭建测试时经常需要部署，于是这是个大问题。又是一通网络搜索，到最后发现Hexo官方文档中就有比较好的解决方案： Hexo 生成的所有文件都放在 public 文件夹中，您可以将它们复制到您喜欢的地方。 看到官方文档如此写到，突然出现个好点子，我直接将public文件夹内的文件用 GitHub Desktop 上传到仓库不就行了吗，结果是这个方法想当的成功，虽然大部分时候 hexo d 都能正常运行，但偶尔出现不行的时候我就会使用这个方法。 CSS渲染错误下载安装、修改配置文件、本地服务器运行测试、部署，打开发现情况正常，于是去自定义了域名，满怀期待的去浏览器输入了我的博客地址，结果出现了让我想不到的景象：怎么我这博客只有字还是乱七八糟的呢？ 又是一通搜索，发现网络上大多数说法都是去更改 _config.yml 文件中的 root 值，而我打开我的配置文件后发现并没有这个预设，发现看到的文章没有时间非常接近的，考虑到可能是版本差异，我再次点进了官方文档，发现问题还是出在了非常简单的地方：我自定义了 GitHub Pages 的域名后没有在 Hexo 配置文件中进行相应的域名更改。果不其然更改后又恢复了正常的样子。 主题配置Hexo 默认主题真是太丑啦，然后去找了找好看的主题，最后发现了 Nexmoe 这个非常二刺猿的好看主题，由于没有相应视频教程，开始自行查询文档进行使用。 中途出现的问题都是些小问题就不细说了，但杂七杂八非常多，大多数是因为自己对这类配置文件、相关操作调整之类的自我原因造成的，所以导致了对主题的配置还花了相当长的时间，但最终还是成功装上了，确定达到自己想要的效果后便开始着手编写第一篇博客，于是就有了这一篇文章。 相关链接Hexo 搭建视频教程：【2021最新版】保姆级Hexo+github搭建个人博客 Hexo 官方文档：文档 | Hexo Nexmoe 项目地址：Nexmoe: 🔥 一个比较特别的 Hexo 主题","categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://blog.windowbr.top/categories/%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://blog.windowbr.top/tags/%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"杂谈","slug":"杂谈","permalink":"http://blog.windowbr.top/categories/%E6%9D%82%E8%B0%88/"},{"name":"技术","slug":"技术","permalink":"http://blog.windowbr.top/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Galgame","slug":"Galgame","permalink":"http://blog.windowbr.top/tags/Galgame/"},{"name":"Minecraft","slug":"Minecraft","permalink":"http://blog.windowbr.top/tags/Minecraft/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.windowbr.top/tags/Linux/"},{"name":"学习","slug":"学习","permalink":"http://blog.windowbr.top/tags/%E5%AD%A6%E4%B9%A0/"}]}